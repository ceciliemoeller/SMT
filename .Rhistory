# #calculate median inter-tap intervals for each observation and bind the vector of medians to the output dataframe
medITI<-vector()
for(k in 1:nrow(tap)){
medITI[k]<- median(dif[[k]])
}
output<-cbind(output, medITI)
# #calculate IQR of inter-tap intervals for each observation and bind the vector of IQR to the output dataframe
iqrITI<-vector()
for(k in 1:nrow(tap)){
iqrITI[k]<- IQR(dif[[k]])
}
output<-cbind(output, iqrITI)
# ########
#
# output$ITI_consistency<-
#   output %>%
#   group_by(code) %>%
#   summarise(mean(iqrITI))
IC<-
output %>%
group_by(code) %>%
summarise(ITI_consistency = mean(medITI))
# # # YEAHHHHH!!! TO LINIER!! :)
# #
# hep<- output$spontaneous_taps
#
# ITI<-diff(as.numeric(unlist(strsplit(hep, ","))))
# # men hvordan får jeg den til at gøre det for alle observationer separat?
# # (for-loopet ovenfor virker, men det må kunne gøres enklere??)
# ###############
output <- bind_cols(addUniqueID, output)
output$id <-output$.id
output<- output%>% select(-.id,-V1 )
#add part no separately for each participant
output$dataset<-1:nrow(output)
output <- subset(output, select=c(dataset,1:ncol(output)-1))
output<- output%>% select(-id )
# ##################################
# WRITE CSV-FILES
# main data files
write.csv(output, file = "./analyses/SMT_pilot.csv",row.names = FALSE)
# ########## plots #########
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=browser), size=6)
output%>%
ggplot()+
geom_point(aes(x=sdITI, y=iqrITI, color=code, shape=device), size=6)
#
# n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
# n_nonmusician<-sum(!is.na(output$ollen[output$ollen == "Nonmusician" | output$ollen == "Music-loving nonmusician"]))
# n_musicians<-sum(!is.na(output$ollen[!output$ollen == "Music-loving nonmusician"& !output$ollen == "Nonmusician"]))
#
# n_musicians_p <- sum(!is.na(output_musbeat$ollen[!output_musbeat$ollen == "Music-loving nonmusician"& !output_musbeat$ollen == "Nonmusician"]))
# pct_musicians_p <- n_musicians_p/nrow(output_musbeat)*100
#
# ##########################
#
# # Extract comments
# show_comments<-output %>% select(id, currentTime, comments, experiment, headphones, browser, device)
# show_comments<- show_comments[!is.na(show_comments$comments),]
# show_comments<- show_comments[!show_comments$comments == "",]
#
# # write.csv(show_comments, file = "./comments.csv")
## and then the within-trial coefficient of variation
output%>%
mutate(sdITI/meanITI, cv_wt)
## and then the within-trial coefficient of variation
output%>%
mutate(cv_wt=sdITI/meanITI)
## and then the within-trial coefficient of variation
output<-
output%>%
mutate(cv_wt=sdITI/meanITI)
output%>%
ggplot()+
geom_point(aes(x=medITI, y=cv_wt, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=medITI, y=cv_wt, color=code, shape=device), size=3)
output%>%
ggplot()+
geom_point(aes(x=sdITI, y=cv_wt, color=code, shape=device), size=3)
output%>%
ggplot()+
geom_point(aes(x=iqrITI, y=cv_wt, color=code, shape=device), size=3)
###########################################################################
# This script extracts data from the SMT pilot study                      #
#                                                                         #
#                                                                         #
# Date: March 2022                                                        #
# Author: Cecilie Møller                                                  #
# Project group: above + Jan Stupacher, Alexandre Celma-Miralles,         #
# Peter Vuust                                                             #
###########################################################################
# install.packages("jsonlite")
# install.packages("plyr")
# install.packages("dplyr")
# install.packages("ggplot2")
# install.packages("rstudioapi")
# install.packages("tidyverse")
# INITIALIZE
library(jsonlite) # is included in the tidyverse package but must be loaded manually
library(plyr)
# library(dplyr) # loads automatically when tidyverse is loaded
# library(ggplot2)  # loads automatically when tidyverse is loaded
library(tidyverse) # note to self: errors thrown by ffjenkins may arise here
library(rstudioapi) # here, or in setwd() below
# SET WORKING DIRECTORY
setwd(dirname(getActiveDocumentContext()$path))       # Set working directory to source file location
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/results/results"),full.names=F))
files <- files[grep(".rds$",files)]
names(files) <- basename(files)
addUniqueID <- ldply(files)
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
output[i,"browser"] <- results$results$browser
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
}
if ("ollen"%in%names(results$results)) {
output[i,"ollen"] <- results$results$ollen
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("code"%in%names(results$results)) {
output[i,"code"] <- results$results$code
}
if ("poly_ratio"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_ratio)
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps (which are in the first column) in the output file
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
}
}
# fix inconsistencies in personal codes
output$code[output$code=="cille "]<- "cille"
output$code[output$code=="Cille"]<- "LP"
output<-
output %>%
mutate(duplets = ifelse(code == "Daina", "Yes, twice before", duplets))
output<-
output %>%
mutate(age = ifelse(code == "Daina", NA, age))
output<-
output %>%
mutate(ollen = ifelse(code == "Daina", NA, ollen))
output$code[output$code=="Daina"]<- "Greta"
# delete test datasets
output<-
output%>%
filter(code!="deleteme")%>%
filter(code !="MissingTaps")%>%
filter(code !="Fastfake")%>%
# ########checking out enframe
# hep<-enframe(output, spont)
# enframe()
# ######################
# #calculate inter-tap intervals
tap<-as.data.frame(output$spontaneous_taps) # extract taps and turn into data frame
dif<- list() #create empty list (the list holds different lengths of data)
for(k in 1:nrow(tap)){
dif[[k]]<- diff(as.numeric(unlist(strsplit(tap[k,], ","))))
}
output<-cbind(output, dif)
# #calculate mean inter-tap intervals for each observation and bind the vector of means to the output dataframe
meanITI<-vector()
for(k in 1:nrow(tap)){
meanITI[k]<- mean(dif[[k]])
}
output<-cbind(output, meanITI)
# #calculate sd of inter-tap intervals for each observation and bind the vector of SDs to the output dataframe
sdITI<-vector()
for(k in 1:nrow(tap)){
sdITI[k]<- sd(dif[[k]])
}
output<-cbind(output, sdITI)
## and then the within-trial coefficient of variation
output<-
output%>%
mutate(cv_wt=sdITI/meanITI)
# #calculate median inter-tap intervals for each observation and bind the vector of medians to the output dataframe
medITI<-vector()
for(k in 1:nrow(tap)){
medITI[k]<- median(dif[[k]])
}
output<-cbind(output, medITI)
# #calculate IQR of inter-tap intervals for each observation and bind the vector of IQR to the output dataframe
iqrITI<-vector()
for(k in 1:nrow(tap)){
iqrITI[k]<- IQR(dif[[k]])
}
output<-cbind(output, iqrITI)
# ########
#
# output$ITI_consistency<-
#   output %>%
#   group_by(code) %>%
#   summarise(mean(iqrITI))
IC<-
output %>%
group_by(code) %>%
summarise(ITI_consistency = mean(medITI))
# # # YEAHHHHH!!! TO LINIER!! :)
# #
# hep<- output$spontaneous_taps
#
# ITI<-diff(as.numeric(unlist(strsplit(hep, ","))))
# # men hvordan får jeg den til at gøre det for alle observationer separat?
# # (for-loopet ovenfor virker, men det må kunne gøres enklere??)
# ###############
output <- bind_cols(addUniqueID, output)
output$id <-output$.id
output<- output%>% select(-.id,-V1 )
#add part no separately for each participant
output$dataset<-1:nrow(output)
output <- subset(output, select=c(dataset,1:ncol(output)-1))
output<- output%>% select(-id )
# ##################################
# WRITE CSV-FILES
# main data files
write.csv(output, file = "./analyses/SMT_pilot.csv",row.names = FALSE)
# ########## plots #########
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=browser), size=6)
output%>%
ggplot()+
geom_point(aes(x=sdITI, y=iqrITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=iqrITI, y=cv_wt, color=code, shape=device), size=3)
#
# n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
# n_nonmusician<-sum(!is.na(output$ollen[output$ollen == "Nonmusician" | output$ollen == "Music-loving nonmusician"]))
# n_musicians<-sum(!is.na(output$ollen[!output$ollen == "Music-loving nonmusician"& !output$ollen == "Nonmusician"]))
#
# n_musicians_p <- sum(!is.na(output_musbeat$ollen[!output_musbeat$ollen == "Music-loving nonmusician"& !output_musbeat$ollen == "Nonmusician"]))
# pct_musicians_p <- n_musicians_p/nrow(output_musbeat)*100
#
# ##########################
#
# # Extract comments
# show_comments<-output %>% select(id, currentTime, comments, experiment, headphones, browser, device)
# show_comments<- show_comments[!is.na(show_comments$comments),]
# show_comments<- show_comments[!show_comments$comments == "",]
#
# # write.csv(show_comments, file = "./comments.csv")
###########################################################################
# This script extracts data from the SMT pilot study                      #
#                                                                         #
#                                                                         #
# Date: March 2022                                                        #
# Author: Cecilie Møller                                                  #
# Project group: above + Jan Stupacher, Alexandre Celma-Miralles,         #
# Peter Vuust                                                             #
###########################################################################
# install.packages("jsonlite")
# install.packages("plyr")
# install.packages("dplyr")
# install.packages("ggplot2")
# install.packages("rstudioapi")
# install.packages("tidyverse")
# INITIALIZE
library(jsonlite) # is included in the tidyverse package but must be loaded manually
library(plyr)
# library(dplyr) # loads automatically when tidyverse is loaded
# library(ggplot2)  # loads automatically when tidyverse is loaded
library(tidyverse) # note to self: errors thrown by ffjenkins may arise here
library(rstudioapi) # here, or in setwd() below
# SET WORKING DIRECTORY
setwd(dirname(getActiveDocumentContext()$path))       # Set working directory to source file location
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/results/results"),full.names=F))
files <- files[grep(".rds$",files)]
names(files) <- basename(files)
addUniqueID <- ldply(files)
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
output[i,"browser"] <- results$results$browser
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
}
if ("ollen"%in%names(results$results)) {
output[i,"ollen"] <- results$results$ollen
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("code"%in%names(results$results)) {
output[i,"code"] <- results$results$code
}
if ("poly_ratio"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_ratio)
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps (which are in the first column) in the output file
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
}
}
# fix inconsistencies in personal codes
output$code[output$code=="cille "]<- "cille"
output$code[output$code=="Cille"]<- "LP"
output<-
output %>%
mutate(duplets = ifelse(code == "Daina", "Yes, twice before", duplets))
output<-
output %>%
mutate(age = ifelse(code == "Daina", NA, age))
output<-
output %>%
mutate(ollen = ifelse(code == "Daina", NA, ollen))
output$code[output$code=="Daina"]<- "Greta"
# delete test datasets
output<-
output%>%
filter(code!="deleteme")%>%
filter(code !="MissingTaps")%>%
filter(code !="Fastfake")
# ########checking out enframe
# hep<-enframe(output, spont)
# enframe()
# ######################
# #calculate inter-tap intervals
tap<-as.data.frame(output$spontaneous_taps) # extract taps and turn into data frame
dif<- list() #create empty list (the list holds different lengths of data)
for(k in 1:nrow(tap)){
dif[[k]]<- diff(as.numeric(unlist(strsplit(tap[k,], ","))))
}
output<-cbind(output, dif)
# #calculate mean inter-tap intervals for each observation and bind the vector of means to the output dataframe
meanITI<-vector()
for(k in 1:nrow(tap)){
meanITI[k]<- mean(dif[[k]])
}
output<-cbind(output, meanITI)
# #calculate sd of inter-tap intervals for each observation and bind the vector of SDs to the output dataframe
sdITI<-vector()
for(k in 1:nrow(tap)){
sdITI[k]<- sd(dif[[k]])
}
output<-cbind(output, sdITI)
## and then the within-trial coefficient of variation
output<-
output%>%
mutate(cv_wt=sdITI/meanITI)
# #calculate median inter-tap intervals for each observation and bind the vector of medians to the output dataframe
medITI<-vector()
for(k in 1:nrow(tap)){
medITI[k]<- median(dif[[k]])
}
output<-cbind(output, medITI)
# #calculate IQR of inter-tap intervals for each observation and bind the vector of IQR to the output dataframe
iqrITI<-vector()
for(k in 1:nrow(tap)){
iqrITI[k]<- IQR(dif[[k]])
}
output<-cbind(output, iqrITI)
# ########
#
# output$ITI_consistency<-
#   output %>%
#   group_by(code) %>%
#   summarise(mean(iqrITI))
IC<-
output %>%
group_by(code) %>%
summarise(ITI_consistency = mean(medITI))
# # # YEAHHHHH!!! TO LINIER!! :)
# #
# hep<- output$spontaneous_taps
#
# ITI<-diff(as.numeric(unlist(strsplit(hep, ","))))
# # men hvordan får jeg den til at gøre det for alle observationer separat?
# # (for-loopet ovenfor virker, men det må kunne gøres enklere??)
# ###############
output <- bind_cols(addUniqueID, output)
output$id <-output$.id
output<- output%>% select(-.id,-V1 )
#add part no separately for each participant
output$dataset<-1:nrow(output)
output <- subset(output, select=c(dataset,1:ncol(output)-1))
output<- output%>% select(-id )
# ##################################
# WRITE CSV-FILES
# main data files
write.csv(output, file = "./analyses/SMT_pilot.csv",row.names = FALSE)
# ########## plots #########
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=browser), size=6)
output%>%
ggplot()+
geom_point(aes(x=sdITI, y=iqrITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=iqrITI, y=cv_wt, color=code, shape=device), size=3)
#
# n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
# n_nonmusician<-sum(!is.na(output$ollen[output$ollen == "Nonmusician" | output$ollen == "Music-loving nonmusician"]))
# n_musicians<-sum(!is.na(output$ollen[!output$ollen == "Music-loving nonmusician"& !output$ollen == "Nonmusician"]))
#
# n_musicians_p <- sum(!is.na(output_musbeat$ollen[!output_musbeat$ollen == "Music-loving nonmusician"& !output_musbeat$ollen == "Nonmusician"]))
# pct_musicians_p <- n_musicians_p/nrow(output_musbeat)*100
#
# ##########################
#
# # Extract comments
# show_comments<-output %>% select(id, currentTime, comments, experiment, headphones, browser, device)
# show_comments<- show_comments[!is.na(show_comments$comments),]
# show_comments<- show_comments[!show_comments$comments == "",]
#
# # write.csv(show_comments, file = "./comments.csv")
output%>%
ggplot()+
geom_point(aes(x=medITI, y=cv_wt, color=code, shape=device), size=3)
output%>%
ggplot()+
geom_point(aes(x=cv_wt, y=medITI, color=code, shape=device), size=3)
output%>%
ggplot()+
geom_point(aes(x=cv_wt, y=sdITI, color=code, shape=device), size=3)
output%>%
ggplot()+
geom_point(aes(x=cv_wt, y=iqrITI, color=code, shape=device), size=3)
output%>%
ggplot()+
geom_point(aes(x=cv_wt, y=medITI, color=code, shape=device), size=3)
shiny::runApp(".")
shiny::runApp(".")
library(psychTestR)
library(purrr)
library(tibble)
items <- tribble(
~ id,       ~ prompt,
"dogs",    "Are you afraid of dogs?",
"birds",   "Are you afraid of birds?",
"heights", "Are you afraid of heights?"
)
items
item_pages <- pmap(items, function(id, prompt) {
NAFC_page(
label = id,
prompt = prompt,
choices = c("Yes", "No")
)
})
timeline <- join(
randomise_at_run_time(label = "item_order",
logic = item_pages),
elt_save_results_to_disk(complete = TRUE),
final_page("You completed the test.")
)
make_test(timeline)
?randomise_at_run_time
## Not run:
join(
randomise_at_run_time(
"main",
list(
randomise_at_run_time(
"1",
list(one_button_page("1a"),
one_button_page("1b"),
one_button_page("1c"))
),
randomise_at_run_time(
"2",
list(one_button_page("2a"),
one_button_page("2b"),
one_button_page("2c"))
),
randomise_at_run_time(
"3",
list(one_button_page("3a"),
one_button_page("3b"),
one_button_page("3c"))
)
)
)
) %>% join(final_page("End")) %>% make_test()
## End(Not run)
